// Code generated by smithy-go-codegen DO NOT EDIT.

package bedrockagentcorecontrol

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol/types"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/smithy-go/middleware"
)

type validateOpCreateAgentRuntimeEndpoint struct {
}

func (*validateOpCreateAgentRuntimeEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAgentRuntimeEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAgentRuntimeEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAgentRuntimeEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAgentRuntime struct {
}

func (*validateOpCreateAgentRuntime) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAgentRuntime) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAgentRuntimeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAgentRuntimeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateApiKeyCredentialProvider struct {
}

func (*validateOpCreateApiKeyCredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateApiKeyCredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateApiKeyCredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateApiKeyCredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateBrowser struct {
}

func (*validateOpCreateBrowser) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateBrowser) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateBrowserInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateBrowserInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateCodeInterpreter struct {
}

func (*validateOpCreateCodeInterpreter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateCodeInterpreter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateCodeInterpreterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateCodeInterpreterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateGateway struct {
}

func (*validateOpCreateGateway) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateGateway) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateGatewayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateGatewayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateGatewayTarget struct {
}

func (*validateOpCreateGatewayTarget) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateGatewayTarget) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateGatewayTargetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateGatewayTargetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateMemory struct {
}

func (*validateOpCreateMemory) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateMemory) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateMemoryInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateMemoryInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateOauth2CredentialProvider struct {
}

func (*validateOpCreateOauth2CredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateOauth2CredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateOauth2CredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateOauth2CredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateWorkloadIdentity struct {
}

func (*validateOpCreateWorkloadIdentity) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateWorkloadIdentity) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateWorkloadIdentityInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateWorkloadIdentityInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAgentRuntimeEndpoint struct {
}

func (*validateOpDeleteAgentRuntimeEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAgentRuntimeEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAgentRuntimeEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAgentRuntimeEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAgentRuntime struct {
}

func (*validateOpDeleteAgentRuntime) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAgentRuntime) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAgentRuntimeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAgentRuntimeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApiKeyCredentialProvider struct {
}

func (*validateOpDeleteApiKeyCredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApiKeyCredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApiKeyCredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApiKeyCredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteBrowser struct {
}

func (*validateOpDeleteBrowser) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteBrowser) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteBrowserInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteBrowserInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteCodeInterpreter struct {
}

func (*validateOpDeleteCodeInterpreter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteCodeInterpreter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteCodeInterpreterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteCodeInterpreterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteGateway struct {
}

func (*validateOpDeleteGateway) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteGateway) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteGatewayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteGatewayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteGatewayTarget struct {
}

func (*validateOpDeleteGatewayTarget) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteGatewayTarget) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteGatewayTargetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteGatewayTargetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteMemory struct {
}

func (*validateOpDeleteMemory) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteMemory) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteMemoryInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteMemoryInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteOauth2CredentialProvider struct {
}

func (*validateOpDeleteOauth2CredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteOauth2CredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteOauth2CredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteOauth2CredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteWorkloadIdentity struct {
}

func (*validateOpDeleteWorkloadIdentity) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteWorkloadIdentity) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteWorkloadIdentityInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteWorkloadIdentityInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAgentRuntimeEndpoint struct {
}

func (*validateOpGetAgentRuntimeEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAgentRuntimeEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAgentRuntimeEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAgentRuntimeEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAgentRuntime struct {
}

func (*validateOpGetAgentRuntime) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAgentRuntime) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAgentRuntimeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAgentRuntimeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetApiKeyCredentialProvider struct {
}

func (*validateOpGetApiKeyCredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetApiKeyCredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetApiKeyCredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetApiKeyCredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetBrowser struct {
}

func (*validateOpGetBrowser) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetBrowser) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetBrowserInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetBrowserInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetCodeInterpreter struct {
}

func (*validateOpGetCodeInterpreter) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetCodeInterpreter) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetCodeInterpreterInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetCodeInterpreterInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetGateway struct {
}

func (*validateOpGetGateway) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetGateway) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetGatewayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetGatewayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetGatewayTarget struct {
}

func (*validateOpGetGatewayTarget) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetGatewayTarget) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetGatewayTargetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetGatewayTargetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMemory struct {
}

func (*validateOpGetMemory) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMemory) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMemoryInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMemoryInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetOauth2CredentialProvider struct {
}

func (*validateOpGetOauth2CredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetOauth2CredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetOauth2CredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetOauth2CredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetWorkloadIdentity struct {
}

func (*validateOpGetWorkloadIdentity) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetWorkloadIdentity) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetWorkloadIdentityInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetWorkloadIdentityInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAgentRuntimeEndpoints struct {
}

func (*validateOpListAgentRuntimeEndpoints) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAgentRuntimeEndpoints) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAgentRuntimeEndpointsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAgentRuntimeEndpointsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAgentRuntimeVersions struct {
}

func (*validateOpListAgentRuntimeVersions) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAgentRuntimeVersions) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAgentRuntimeVersionsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAgentRuntimeVersionsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListGatewayTargets struct {
}

func (*validateOpListGatewayTargets) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListGatewayTargets) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListGatewayTargetsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListGatewayTargetsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpSetTokenVaultCMK struct {
}

func (*validateOpSetTokenVaultCMK) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpSetTokenVaultCMK) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*SetTokenVaultCMKInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpSetTokenVaultCMKInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpSynchronizeGatewayTargets struct {
}

func (*validateOpSynchronizeGatewayTargets) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpSynchronizeGatewayTargets) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*SynchronizeGatewayTargetsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpSynchronizeGatewayTargetsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateAgentRuntimeEndpoint struct {
}

func (*validateOpUpdateAgentRuntimeEndpoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateAgentRuntimeEndpoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateAgentRuntimeEndpointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateAgentRuntimeEndpointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateAgentRuntime struct {
}

func (*validateOpUpdateAgentRuntime) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateAgentRuntime) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateAgentRuntimeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateAgentRuntimeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateApiKeyCredentialProvider struct {
}

func (*validateOpUpdateApiKeyCredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateApiKeyCredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateApiKeyCredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateApiKeyCredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateGateway struct {
}

func (*validateOpUpdateGateway) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateGateway) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateGatewayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateGatewayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateGatewayTarget struct {
}

func (*validateOpUpdateGatewayTarget) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateGatewayTarget) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateGatewayTargetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateGatewayTargetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateMemory struct {
}

func (*validateOpUpdateMemory) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateMemory) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateMemoryInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateMemoryInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateOauth2CredentialProvider struct {
}

func (*validateOpUpdateOauth2CredentialProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateOauth2CredentialProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateOauth2CredentialProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateOauth2CredentialProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateWorkloadIdentity struct {
}

func (*validateOpUpdateWorkloadIdentity) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateWorkloadIdentity) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateWorkloadIdentityInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateWorkloadIdentityInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpCreateAgentRuntimeEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAgentRuntimeEndpoint{}, middleware.After)
}

func addOpCreateAgentRuntimeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAgentRuntime{}, middleware.After)
}

func addOpCreateApiKeyCredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateApiKeyCredentialProvider{}, middleware.After)
}

func addOpCreateBrowserValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateBrowser{}, middleware.After)
}

func addOpCreateCodeInterpreterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateCodeInterpreter{}, middleware.After)
}

func addOpCreateGatewayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateGateway{}, middleware.After)
}

func addOpCreateGatewayTargetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateGatewayTarget{}, middleware.After)
}

func addOpCreateMemoryValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateMemory{}, middleware.After)
}

func addOpCreateOauth2CredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateOauth2CredentialProvider{}, middleware.After)
}

func addOpCreateWorkloadIdentityValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateWorkloadIdentity{}, middleware.After)
}

func addOpDeleteAgentRuntimeEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAgentRuntimeEndpoint{}, middleware.After)
}

func addOpDeleteAgentRuntimeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAgentRuntime{}, middleware.After)
}

func addOpDeleteApiKeyCredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApiKeyCredentialProvider{}, middleware.After)
}

func addOpDeleteBrowserValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteBrowser{}, middleware.After)
}

func addOpDeleteCodeInterpreterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteCodeInterpreter{}, middleware.After)
}

func addOpDeleteGatewayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteGateway{}, middleware.After)
}

func addOpDeleteGatewayTargetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteGatewayTarget{}, middleware.After)
}

func addOpDeleteMemoryValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteMemory{}, middleware.After)
}

func addOpDeleteOauth2CredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteOauth2CredentialProvider{}, middleware.After)
}

func addOpDeleteWorkloadIdentityValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteWorkloadIdentity{}, middleware.After)
}

func addOpGetAgentRuntimeEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAgentRuntimeEndpoint{}, middleware.After)
}

func addOpGetAgentRuntimeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAgentRuntime{}, middleware.After)
}

func addOpGetApiKeyCredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetApiKeyCredentialProvider{}, middleware.After)
}

func addOpGetBrowserValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetBrowser{}, middleware.After)
}

func addOpGetCodeInterpreterValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetCodeInterpreter{}, middleware.After)
}

func addOpGetGatewayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetGateway{}, middleware.After)
}

func addOpGetGatewayTargetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetGatewayTarget{}, middleware.After)
}

func addOpGetMemoryValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMemory{}, middleware.After)
}

func addOpGetOauth2CredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetOauth2CredentialProvider{}, middleware.After)
}

func addOpGetWorkloadIdentityValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetWorkloadIdentity{}, middleware.After)
}

func addOpListAgentRuntimeEndpointsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAgentRuntimeEndpoints{}, middleware.After)
}

func addOpListAgentRuntimeVersionsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAgentRuntimeVersions{}, middleware.After)
}

func addOpListGatewayTargetsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListGatewayTargets{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpSetTokenVaultCMKValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpSetTokenVaultCMK{}, middleware.After)
}

func addOpSynchronizeGatewayTargetsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpSynchronizeGatewayTargets{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateAgentRuntimeEndpointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateAgentRuntimeEndpoint{}, middleware.After)
}

func addOpUpdateAgentRuntimeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateAgentRuntime{}, middleware.After)
}

func addOpUpdateApiKeyCredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateApiKeyCredentialProvider{}, middleware.After)
}

func addOpUpdateGatewayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateGateway{}, middleware.After)
}

func addOpUpdateGatewayTargetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateGatewayTarget{}, middleware.After)
}

func addOpUpdateMemoryValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateMemory{}, middleware.After)
}

func addOpUpdateOauth2CredentialProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateOauth2CredentialProvider{}, middleware.After)
}

func addOpUpdateWorkloadIdentityValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateWorkloadIdentity{}, middleware.After)
}

func validateAgentRuntimeArtifact(v types.AgentRuntimeArtifact) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AgentRuntimeArtifact"}
	switch uv := v.(type) {
	case *types.AgentRuntimeArtifactMemberContainerConfiguration:
		if err := validateContainerConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[containerConfiguration]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAtlassianOauth2ProviderConfigInput(v *types.AtlassianOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AtlassianOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAuthorizerConfiguration(v types.AuthorizerConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AuthorizerConfiguration"}
	switch uv := v.(type) {
	case *types.AuthorizerConfigurationMemberCustomJWTAuthorizer:
		if err := validateCustomJWTAuthorizerConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[customJWTAuthorizer]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateBrowserNetworkConfiguration(v *types.BrowserNetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BrowserNetworkConfiguration"}
	if len(v.NetworkMode) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkMode"))
	}
	if v.VpcConfig != nil {
		if err := validateVpcConfig(v.VpcConfig); err != nil {
			invalidParams.AddNested("VpcConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateBrowserSigningConfigInput(v *types.BrowserSigningConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BrowserSigningConfigInput"}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCodeInterpreterNetworkConfiguration(v *types.CodeInterpreterNetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CodeInterpreterNetworkConfiguration"}
	if len(v.NetworkMode) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkMode"))
	}
	if v.VpcConfig != nil {
		if err := validateVpcConfig(v.VpcConfig); err != nil {
			invalidParams.AddNested("VpcConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateContainerConfiguration(v *types.ContainerConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ContainerConfiguration"}
	if v.ContainerUri == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ContainerUri"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCredentialProvider(v types.CredentialProvider) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CredentialProvider"}
	switch uv := v.(type) {
	case *types.CredentialProviderMemberApiKeyCredentialProvider:
		if err := validateGatewayApiKeyCredentialProvider(&uv.Value); err != nil {
			invalidParams.AddNested("[apiKeyCredentialProvider]", err.(smithy.InvalidParamsError))
		}

	case *types.CredentialProviderMemberOauthCredentialProvider:
		if err := validateOAuthCredentialProvider(&uv.Value); err != nil {
			invalidParams.AddNested("[oauthCredentialProvider]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCredentialProviderConfiguration(v *types.CredentialProviderConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CredentialProviderConfiguration"}
	if len(v.CredentialProviderType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("CredentialProviderType"))
	}
	if v.CredentialProvider != nil {
		if err := validateCredentialProvider(v.CredentialProvider); err != nil {
			invalidParams.AddNested("CredentialProvider", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCredentialProviderConfigurations(v []types.CredentialProviderConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CredentialProviderConfigurations"}
	for i := range v {
		if err := validateCredentialProviderConfiguration(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomConfigurationInput(v types.CustomConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomConfigurationInput"}
	switch uv := v.(type) {
	case *types.CustomConfigurationInputMemberSelfManagedConfiguration:
		if err := validateSelfManagedConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[selfManagedConfiguration]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomConfigurationInputMemberSemanticOverride:
		if err := validateSemanticOverrideConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[semanticOverride]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomConfigurationInputMemberSummaryOverride:
		if err := validateSummaryOverrideConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[summaryOverride]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomConfigurationInputMemberUserPreferenceOverride:
		if err := validateUserPreferenceOverrideConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[userPreferenceOverride]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomConsolidationConfigurationInput(v types.CustomConsolidationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomConsolidationConfigurationInput"}
	switch uv := v.(type) {
	case *types.CustomConsolidationConfigurationInputMemberSemanticConsolidationOverride:
		if err := validateSemanticOverrideConsolidationConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[semanticConsolidationOverride]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomConsolidationConfigurationInputMemberSummaryConsolidationOverride:
		if err := validateSummaryOverrideConsolidationConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[summaryConsolidationOverride]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomConsolidationConfigurationInputMemberUserPreferenceConsolidationOverride:
		if err := validateUserPreferenceOverrideConsolidationConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[userPreferenceConsolidationOverride]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomExtractionConfigurationInput(v types.CustomExtractionConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomExtractionConfigurationInput"}
	switch uv := v.(type) {
	case *types.CustomExtractionConfigurationInputMemberSemanticExtractionOverride:
		if err := validateSemanticOverrideExtractionConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[semanticExtractionOverride]", err.(smithy.InvalidParamsError))
		}

	case *types.CustomExtractionConfigurationInputMemberUserPreferenceExtractionOverride:
		if err := validateUserPreferenceOverrideExtractionConfigurationInput(&uv.Value); err != nil {
			invalidParams.AddNested("[userPreferenceExtractionOverride]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomJWTAuthorizerConfiguration(v *types.CustomJWTAuthorizerConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomJWTAuthorizerConfiguration"}
	if v.DiscoveryUrl == nil {
		invalidParams.Add(smithy.NewErrParamRequired("DiscoveryUrl"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomMemoryStrategyInput(v *types.CustomMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomMemoryStrategyInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Configuration != nil {
		if err := validateCustomConfigurationInput(v.Configuration); err != nil {
			invalidParams.AddNested("Configuration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomOauth2ProviderConfigInput(v *types.CustomOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomOauth2ProviderConfigInput"}
	if v.OauthDiscovery == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OauthDiscovery"))
	} else if v.OauthDiscovery != nil {
		if err := validateOauth2Discovery(v.OauthDiscovery); err != nil {
			invalidParams.AddNested("OauthDiscovery", err.(smithy.InvalidParamsError))
		}
	}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDeleteMemoryStrategiesList(v []types.DeleteMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteMemoryStrategiesList"}
	for i := range v {
		if err := validateDeleteMemoryStrategyInput(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDeleteMemoryStrategyInput(v *types.DeleteMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteMemoryStrategyInput"}
	if v.MemoryStrategyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemoryStrategyId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGatewayApiKeyCredentialProvider(v *types.GatewayApiKeyCredentialProvider) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GatewayApiKeyCredentialProvider"}
	if v.ProviderArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGithubOauth2ProviderConfigInput(v *types.GithubOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GithubOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateGoogleOauth2ProviderConfigInput(v *types.GoogleOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GoogleOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIncludedOauth2ProviderConfigInput(v *types.IncludedOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IncludedOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInvocationConfigurationInput(v *types.InvocationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InvocationConfigurationInput"}
	if v.TopicArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TopicArn"))
	}
	if v.PayloadDeliveryBucketName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PayloadDeliveryBucketName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateKmsConfiguration(v *types.KmsConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "KmsConfiguration"}
	if len(v.KeyType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("KeyType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateLinkedinOauth2ProviderConfigInput(v *types.LinkedinOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "LinkedinOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMcpLambdaTargetConfiguration(v *types.McpLambdaTargetConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "McpLambdaTargetConfiguration"}
	if v.LambdaArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LambdaArn"))
	}
	if v.ToolSchema == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ToolSchema"))
	} else if v.ToolSchema != nil {
		if err := validateToolSchema(v.ToolSchema); err != nil {
			invalidParams.AddNested("ToolSchema", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMcpServerTargetConfiguration(v *types.McpServerTargetConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "McpServerTargetConfiguration"}
	if v.Endpoint == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Endpoint"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMcpTargetConfiguration(v types.McpTargetConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "McpTargetConfiguration"}
	switch uv := v.(type) {
	case *types.McpTargetConfigurationMemberLambda:
		if err := validateMcpLambdaTargetConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[lambda]", err.(smithy.InvalidParamsError))
		}

	case *types.McpTargetConfigurationMemberMcpServer:
		if err := validateMcpServerTargetConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[mcpServer]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMemoryStrategyInput(v types.MemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MemoryStrategyInput"}
	switch uv := v.(type) {
	case *types.MemoryStrategyInputMemberCustomMemoryStrategy:
		if err := validateCustomMemoryStrategyInput(&uv.Value); err != nil {
			invalidParams.AddNested("[customMemoryStrategy]", err.(smithy.InvalidParamsError))
		}

	case *types.MemoryStrategyInputMemberSemanticMemoryStrategy:
		if err := validateSemanticMemoryStrategyInput(&uv.Value); err != nil {
			invalidParams.AddNested("[semanticMemoryStrategy]", err.(smithy.InvalidParamsError))
		}

	case *types.MemoryStrategyInputMemberSummaryMemoryStrategy:
		if err := validateSummaryMemoryStrategyInput(&uv.Value); err != nil {
			invalidParams.AddNested("[summaryMemoryStrategy]", err.(smithy.InvalidParamsError))
		}

	case *types.MemoryStrategyInputMemberUserPreferenceMemoryStrategy:
		if err := validateUserPreferenceMemoryStrategyInput(&uv.Value); err != nil {
			invalidParams.AddNested("[userPreferenceMemoryStrategy]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMemoryStrategyInputList(v []types.MemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MemoryStrategyInputList"}
	for i := range v {
		if err := validateMemoryStrategyInput(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMicrosoftOauth2ProviderConfigInput(v *types.MicrosoftOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MicrosoftOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyConsolidationConfiguration(v types.ModifyConsolidationConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyConsolidationConfiguration"}
	switch uv := v.(type) {
	case *types.ModifyConsolidationConfigurationMemberCustomConsolidationConfiguration:
		if err := validateCustomConsolidationConfigurationInput(uv.Value); err != nil {
			invalidParams.AddNested("[customConsolidationConfiguration]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyExtractionConfiguration(v types.ModifyExtractionConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyExtractionConfiguration"}
	switch uv := v.(type) {
	case *types.ModifyExtractionConfigurationMemberCustomExtractionConfiguration:
		if err := validateCustomExtractionConfigurationInput(uv.Value); err != nil {
			invalidParams.AddNested("[customExtractionConfiguration]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyMemoryStrategies(v *types.ModifyMemoryStrategies) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyMemoryStrategies"}
	if v.AddMemoryStrategies != nil {
		if err := validateMemoryStrategyInputList(v.AddMemoryStrategies); err != nil {
			invalidParams.AddNested("AddMemoryStrategies", err.(smithy.InvalidParamsError))
		}
	}
	if v.ModifyMemoryStrategies != nil {
		if err := validateModifyMemoryStrategiesList(v.ModifyMemoryStrategies); err != nil {
			invalidParams.AddNested("ModifyMemoryStrategies", err.(smithy.InvalidParamsError))
		}
	}
	if v.DeleteMemoryStrategies != nil {
		if err := validateDeleteMemoryStrategiesList(v.DeleteMemoryStrategies); err != nil {
			invalidParams.AddNested("DeleteMemoryStrategies", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyMemoryStrategiesList(v []types.ModifyMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyMemoryStrategiesList"}
	for i := range v {
		if err := validateModifyMemoryStrategyInput(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyMemoryStrategyInput(v *types.ModifyMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyMemoryStrategyInput"}
	if v.MemoryStrategyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemoryStrategyId"))
	}
	if v.Configuration != nil {
		if err := validateModifyStrategyConfiguration(v.Configuration); err != nil {
			invalidParams.AddNested("Configuration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateModifyStrategyConfiguration(v *types.ModifyStrategyConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ModifyStrategyConfiguration"}
	if v.Extraction != nil {
		if err := validateModifyExtractionConfiguration(v.Extraction); err != nil {
			invalidParams.AddNested("Extraction", err.(smithy.InvalidParamsError))
		}
	}
	if v.Consolidation != nil {
		if err := validateModifyConsolidationConfiguration(v.Consolidation); err != nil {
			invalidParams.AddNested("Consolidation", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateNetworkConfiguration(v *types.NetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "NetworkConfiguration"}
	if len(v.NetworkMode) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkMode"))
	}
	if v.NetworkModeConfig != nil {
		if err := validateVpcConfig(v.NetworkModeConfig); err != nil {
			invalidParams.AddNested("NetworkModeConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOauth2AuthorizationServerMetadata(v *types.Oauth2AuthorizationServerMetadata) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Oauth2AuthorizationServerMetadata"}
	if v.Issuer == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Issuer"))
	}
	if v.AuthorizationEndpoint == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AuthorizationEndpoint"))
	}
	if v.TokenEndpoint == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TokenEndpoint"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOauth2Discovery(v types.Oauth2Discovery) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Oauth2Discovery"}
	switch uv := v.(type) {
	case *types.Oauth2DiscoveryMemberAuthorizationServerMetadata:
		if err := validateOauth2AuthorizationServerMetadata(&uv.Value); err != nil {
			invalidParams.AddNested("[authorizationServerMetadata]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOauth2ProviderConfigInput(v types.Oauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Oauth2ProviderConfigInput"}
	switch uv := v.(type) {
	case *types.Oauth2ProviderConfigInputMemberAtlassianOauth2ProviderConfig:
		if err := validateAtlassianOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[atlassianOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberCustomOauth2ProviderConfig:
		if err := validateCustomOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[customOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberGithubOauth2ProviderConfig:
		if err := validateGithubOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[githubOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberGoogleOauth2ProviderConfig:
		if err := validateGoogleOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[googleOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberIncludedOauth2ProviderConfig:
		if err := validateIncludedOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[includedOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberLinkedinOauth2ProviderConfig:
		if err := validateLinkedinOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[linkedinOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberMicrosoftOauth2ProviderConfig:
		if err := validateMicrosoftOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[microsoftOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberSalesforceOauth2ProviderConfig:
		if err := validateSalesforceOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[salesforceOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	case *types.Oauth2ProviderConfigInputMemberSlackOauth2ProviderConfig:
		if err := validateSlackOauth2ProviderConfigInput(&uv.Value); err != nil {
			invalidParams.AddNested("[slackOauth2ProviderConfig]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOAuthCredentialProvider(v *types.OAuthCredentialProvider) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OAuthCredentialProvider"}
	if v.ProviderArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderArn"))
	}
	if v.Scopes == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Scopes"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateProtocolConfiguration(v *types.ProtocolConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ProtocolConfiguration"}
	if len(v.ServerProtocol) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ServerProtocol"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRecordingConfig(v *types.RecordingConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RecordingConfig"}
	if v.S3Location != nil {
		if err := validateS3Location(v.S3Location); err != nil {
			invalidParams.AddNested("S3Location", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateS3Location(v *types.S3Location) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "S3Location"}
	if v.Bucket == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Bucket"))
	}
	if v.Prefix == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Prefix"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSalesforceOauth2ProviderConfigInput(v *types.SalesforceOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SalesforceOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSchemaDefinition(v *types.SchemaDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SchemaDefinition"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Properties != nil {
		if err := validateSchemaProperties(v.Properties); err != nil {
			invalidParams.AddNested("Properties", err.(smithy.InvalidParamsError))
		}
	}
	if v.Items != nil {
		if err := validateSchemaDefinition(v.Items); err != nil {
			invalidParams.AddNested("Items", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSchemaProperties(v map[string]types.SchemaDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SchemaProperties"}
	for key := range v {
		value := v[key]
		if err := validateSchemaDefinition(&value); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%q]", key), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSelfManagedConfigurationInput(v *types.SelfManagedConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SelfManagedConfigurationInput"}
	if v.InvocationConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InvocationConfiguration"))
	} else if v.InvocationConfiguration != nil {
		if err := validateInvocationConfigurationInput(v.InvocationConfiguration); err != nil {
			invalidParams.AddNested("InvocationConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSemanticMemoryStrategyInput(v *types.SemanticMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SemanticMemoryStrategyInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSemanticOverrideConfigurationInput(v *types.SemanticOverrideConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SemanticOverrideConfigurationInput"}
	if v.Extraction != nil {
		if err := validateSemanticOverrideExtractionConfigurationInput(v.Extraction); err != nil {
			invalidParams.AddNested("Extraction", err.(smithy.InvalidParamsError))
		}
	}
	if v.Consolidation != nil {
		if err := validateSemanticOverrideConsolidationConfigurationInput(v.Consolidation); err != nil {
			invalidParams.AddNested("Consolidation", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSemanticOverrideConsolidationConfigurationInput(v *types.SemanticOverrideConsolidationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SemanticOverrideConsolidationConfigurationInput"}
	if v.AppendToPrompt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AppendToPrompt"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSemanticOverrideExtractionConfigurationInput(v *types.SemanticOverrideExtractionConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SemanticOverrideExtractionConfigurationInput"}
	if v.AppendToPrompt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AppendToPrompt"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSlackOauth2ProviderConfigInput(v *types.SlackOauth2ProviderConfigInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SlackOauth2ProviderConfigInput"}
	if v.ClientId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientId"))
	}
	if v.ClientSecret == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClientSecret"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSummaryMemoryStrategyInput(v *types.SummaryMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SummaryMemoryStrategyInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSummaryOverrideConfigurationInput(v *types.SummaryOverrideConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SummaryOverrideConfigurationInput"}
	if v.Consolidation != nil {
		if err := validateSummaryOverrideConsolidationConfigurationInput(v.Consolidation); err != nil {
			invalidParams.AddNested("Consolidation", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSummaryOverrideConsolidationConfigurationInput(v *types.SummaryOverrideConsolidationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SummaryOverrideConsolidationConfigurationInput"}
	if v.AppendToPrompt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AppendToPrompt"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTargetConfiguration(v types.TargetConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TargetConfiguration"}
	switch uv := v.(type) {
	case *types.TargetConfigurationMemberMcp:
		if err := validateMcpTargetConfiguration(uv.Value); err != nil {
			invalidParams.AddNested("[mcp]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateToolDefinition(v *types.ToolDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ToolDefinition"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Description == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Description"))
	}
	if v.InputSchema == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSchema"))
	} else if v.InputSchema != nil {
		if err := validateSchemaDefinition(v.InputSchema); err != nil {
			invalidParams.AddNested("InputSchema", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputSchema != nil {
		if err := validateSchemaDefinition(v.OutputSchema); err != nil {
			invalidParams.AddNested("OutputSchema", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateToolDefinitions(v []types.ToolDefinition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ToolDefinitions"}
	for i := range v {
		if err := validateToolDefinition(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateToolSchema(v types.ToolSchema) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ToolSchema"}
	switch uv := v.(type) {
	case *types.ToolSchemaMemberInlinePayload:
		if err := validateToolDefinitions(uv.Value); err != nil {
			invalidParams.AddNested("[inlinePayload]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateUserPreferenceMemoryStrategyInput(v *types.UserPreferenceMemoryStrategyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UserPreferenceMemoryStrategyInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateUserPreferenceOverrideConfigurationInput(v *types.UserPreferenceOverrideConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UserPreferenceOverrideConfigurationInput"}
	if v.Extraction != nil {
		if err := validateUserPreferenceOverrideExtractionConfigurationInput(v.Extraction); err != nil {
			invalidParams.AddNested("Extraction", err.(smithy.InvalidParamsError))
		}
	}
	if v.Consolidation != nil {
		if err := validateUserPreferenceOverrideConsolidationConfigurationInput(v.Consolidation); err != nil {
			invalidParams.AddNested("Consolidation", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateUserPreferenceOverrideConsolidationConfigurationInput(v *types.UserPreferenceOverrideConsolidationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UserPreferenceOverrideConsolidationConfigurationInput"}
	if v.AppendToPrompt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AppendToPrompt"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateUserPreferenceOverrideExtractionConfigurationInput(v *types.UserPreferenceOverrideExtractionConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UserPreferenceOverrideExtractionConfigurationInput"}
	if v.AppendToPrompt == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AppendToPrompt"))
	}
	if v.ModelId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ModelId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateVpcConfig(v *types.VpcConfig) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "VpcConfig"}
	if v.SecurityGroups == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SecurityGroups"))
	}
	if v.Subnets == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Subnets"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAgentRuntimeEndpointInput(v *CreateAgentRuntimeEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAgentRuntimeEndpointInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAgentRuntimeInput(v *CreateAgentRuntimeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAgentRuntimeInput"}
	if v.AgentRuntimeName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeName"))
	}
	if v.AgentRuntimeArtifact == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeArtifact"))
	} else if v.AgentRuntimeArtifact != nil {
		if err := validateAgentRuntimeArtifact(v.AgentRuntimeArtifact); err != nil {
			invalidParams.AddNested("AgentRuntimeArtifact", err.(smithy.InvalidParamsError))
		}
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.NetworkConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkConfiguration"))
	} else if v.NetworkConfiguration != nil {
		if err := validateNetworkConfiguration(v.NetworkConfiguration); err != nil {
			invalidParams.AddNested("NetworkConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.AuthorizerConfiguration != nil {
		if err := validateAuthorizerConfiguration(v.AuthorizerConfiguration); err != nil {
			invalidParams.AddNested("AuthorizerConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.ProtocolConfiguration != nil {
		if err := validateProtocolConfiguration(v.ProtocolConfiguration); err != nil {
			invalidParams.AddNested("ProtocolConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateApiKeyCredentialProviderInput(v *CreateApiKeyCredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateApiKeyCredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.ApiKey == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApiKey"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateBrowserInput(v *CreateBrowserInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateBrowserInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.NetworkConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkConfiguration"))
	} else if v.NetworkConfiguration != nil {
		if err := validateBrowserNetworkConfiguration(v.NetworkConfiguration); err != nil {
			invalidParams.AddNested("NetworkConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.Recording != nil {
		if err := validateRecordingConfig(v.Recording); err != nil {
			invalidParams.AddNested("Recording", err.(smithy.InvalidParamsError))
		}
	}
	if v.BrowserSigning != nil {
		if err := validateBrowserSigningConfigInput(v.BrowserSigning); err != nil {
			invalidParams.AddNested("BrowserSigning", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateCodeInterpreterInput(v *CreateCodeInterpreterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateCodeInterpreterInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.NetworkConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkConfiguration"))
	} else if v.NetworkConfiguration != nil {
		if err := validateCodeInterpreterNetworkConfiguration(v.NetworkConfiguration); err != nil {
			invalidParams.AddNested("NetworkConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateGatewayInput(v *CreateGatewayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateGatewayInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if len(v.ProtocolType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ProtocolType"))
	}
	if len(v.AuthorizerType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AuthorizerType"))
	}
	if v.AuthorizerConfiguration != nil {
		if err := validateAuthorizerConfiguration(v.AuthorizerConfiguration); err != nil {
			invalidParams.AddNested("AuthorizerConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateGatewayTargetInput(v *CreateGatewayTargetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateGatewayTargetInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.TargetConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetConfiguration"))
	} else if v.TargetConfiguration != nil {
		if err := validateTargetConfiguration(v.TargetConfiguration); err != nil {
			invalidParams.AddNested("TargetConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.CredentialProviderConfigurations != nil {
		if err := validateCredentialProviderConfigurations(v.CredentialProviderConfigurations); err != nil {
			invalidParams.AddNested("CredentialProviderConfigurations", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateMemoryInput(v *CreateMemoryInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateMemoryInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.EventExpiryDuration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EventExpiryDuration"))
	}
	if v.MemoryStrategies != nil {
		if err := validateMemoryStrategyInputList(v.MemoryStrategies); err != nil {
			invalidParams.AddNested("MemoryStrategies", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateOauth2CredentialProviderInput(v *CreateOauth2CredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateOauth2CredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if len(v.CredentialProviderVendor) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("CredentialProviderVendor"))
	}
	if v.Oauth2ProviderConfigInput == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Oauth2ProviderConfigInput"))
	} else if v.Oauth2ProviderConfigInput != nil {
		if err := validateOauth2ProviderConfigInput(v.Oauth2ProviderConfigInput); err != nil {
			invalidParams.AddNested("Oauth2ProviderConfigInput", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateWorkloadIdentityInput(v *CreateWorkloadIdentityInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateWorkloadIdentityInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAgentRuntimeEndpointInput(v *DeleteAgentRuntimeEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAgentRuntimeEndpointInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if v.EndpointName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAgentRuntimeInput(v *DeleteAgentRuntimeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAgentRuntimeInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApiKeyCredentialProviderInput(v *DeleteApiKeyCredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApiKeyCredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteBrowserInput(v *DeleteBrowserInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteBrowserInput"}
	if v.BrowserId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BrowserId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteCodeInterpreterInput(v *DeleteCodeInterpreterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteCodeInterpreterInput"}
	if v.CodeInterpreterId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CodeInterpreterId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteGatewayInput(v *DeleteGatewayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteGatewayInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteGatewayTargetInput(v *DeleteGatewayTargetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteGatewayTargetInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.TargetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteMemoryInput(v *DeleteMemoryInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteMemoryInput"}
	if v.MemoryId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemoryId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteOauth2CredentialProviderInput(v *DeleteOauth2CredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteOauth2CredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteWorkloadIdentityInput(v *DeleteWorkloadIdentityInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteWorkloadIdentityInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAgentRuntimeEndpointInput(v *GetAgentRuntimeEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAgentRuntimeEndpointInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if v.EndpointName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAgentRuntimeInput(v *GetAgentRuntimeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAgentRuntimeInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetApiKeyCredentialProviderInput(v *GetApiKeyCredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetApiKeyCredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetBrowserInput(v *GetBrowserInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetBrowserInput"}
	if v.BrowserId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BrowserId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetCodeInterpreterInput(v *GetCodeInterpreterInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetCodeInterpreterInput"}
	if v.CodeInterpreterId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CodeInterpreterId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetGatewayInput(v *GetGatewayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetGatewayInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetGatewayTargetInput(v *GetGatewayTargetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetGatewayTargetInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.TargetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMemoryInput(v *GetMemoryInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMemoryInput"}
	if v.MemoryId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemoryId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetOauth2CredentialProviderInput(v *GetOauth2CredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetOauth2CredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetWorkloadIdentityInput(v *GetWorkloadIdentityInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetWorkloadIdentityInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAgentRuntimeEndpointsInput(v *ListAgentRuntimeEndpointsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAgentRuntimeEndpointsInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAgentRuntimeVersionsInput(v *ListAgentRuntimeVersionsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAgentRuntimeVersionsInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListGatewayTargetsInput(v *ListGatewayTargetsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListGatewayTargetsInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpSetTokenVaultCMKInput(v *SetTokenVaultCMKInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SetTokenVaultCMKInput"}
	if v.KmsConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("KmsConfiguration"))
	} else if v.KmsConfiguration != nil {
		if err := validateKmsConfiguration(v.KmsConfiguration); err != nil {
			invalidParams.AddNested("KmsConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpSynchronizeGatewayTargetsInput(v *SynchronizeGatewayTargetsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SynchronizeGatewayTargetsInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.TargetIdList == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetIdList"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateAgentRuntimeEndpointInput(v *UpdateAgentRuntimeEndpointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateAgentRuntimeEndpointInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if v.EndpointName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EndpointName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateAgentRuntimeInput(v *UpdateAgentRuntimeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateAgentRuntimeInput"}
	if v.AgentRuntimeId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeId"))
	}
	if v.AgentRuntimeArtifact == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AgentRuntimeArtifact"))
	} else if v.AgentRuntimeArtifact != nil {
		if err := validateAgentRuntimeArtifact(v.AgentRuntimeArtifact); err != nil {
			invalidParams.AddNested("AgentRuntimeArtifact", err.(smithy.InvalidParamsError))
		}
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.NetworkConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NetworkConfiguration"))
	} else if v.NetworkConfiguration != nil {
		if err := validateNetworkConfiguration(v.NetworkConfiguration); err != nil {
			invalidParams.AddNested("NetworkConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.AuthorizerConfiguration != nil {
		if err := validateAuthorizerConfiguration(v.AuthorizerConfiguration); err != nil {
			invalidParams.AddNested("AuthorizerConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.ProtocolConfiguration != nil {
		if err := validateProtocolConfiguration(v.ProtocolConfiguration); err != nil {
			invalidParams.AddNested("ProtocolConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateApiKeyCredentialProviderInput(v *UpdateApiKeyCredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateApiKeyCredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.ApiKey == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApiKey"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateGatewayInput(v *UpdateGatewayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateGatewayInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if len(v.ProtocolType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ProtocolType"))
	}
	if len(v.AuthorizerType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AuthorizerType"))
	}
	if v.AuthorizerConfiguration != nil {
		if err := validateAuthorizerConfiguration(v.AuthorizerConfiguration); err != nil {
			invalidParams.AddNested("AuthorizerConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateGatewayTargetInput(v *UpdateGatewayTargetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateGatewayTargetInput"}
	if v.GatewayIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GatewayIdentifier"))
	}
	if v.TargetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetId"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.TargetConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetConfiguration"))
	} else if v.TargetConfiguration != nil {
		if err := validateTargetConfiguration(v.TargetConfiguration); err != nil {
			invalidParams.AddNested("TargetConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.CredentialProviderConfigurations != nil {
		if err := validateCredentialProviderConfigurations(v.CredentialProviderConfigurations); err != nil {
			invalidParams.AddNested("CredentialProviderConfigurations", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateMemoryInput(v *UpdateMemoryInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateMemoryInput"}
	if v.MemoryId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemoryId"))
	}
	if v.MemoryStrategies != nil {
		if err := validateModifyMemoryStrategies(v.MemoryStrategies); err != nil {
			invalidParams.AddNested("MemoryStrategies", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateOauth2CredentialProviderInput(v *UpdateOauth2CredentialProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateOauth2CredentialProviderInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if len(v.CredentialProviderVendor) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("CredentialProviderVendor"))
	}
	if v.Oauth2ProviderConfigInput == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Oauth2ProviderConfigInput"))
	} else if v.Oauth2ProviderConfigInput != nil {
		if err := validateOauth2ProviderConfigInput(v.Oauth2ProviderConfigInput); err != nil {
			invalidParams.AddNested("Oauth2ProviderConfigInput", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateWorkloadIdentityInput(v *UpdateWorkloadIdentityInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateWorkloadIdentityInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
