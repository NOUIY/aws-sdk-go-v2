// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type CentralizationFailureReason string

// Enum values for CentralizationFailureReason
const (
	CentralizationFailureReasonTrustedAccessNotEnabled             CentralizationFailureReason = "TRUSTED_ACCESS_NOT_ENABLED"
	CentralizationFailureReasonDestinationAccountNotInOrganization CentralizationFailureReason = "DESTINATION_ACCOUNT_NOT_IN_ORGANIZATION"
	CentralizationFailureReasonInternalServerError                 CentralizationFailureReason = "INTERNAL_SERVER_ERROR"
)

// Values returns all known values for CentralizationFailureReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CentralizationFailureReason) Values() []CentralizationFailureReason {
	return []CentralizationFailureReason{
		"TRUSTED_ACCESS_NOT_ENABLED",
		"DESTINATION_ACCOUNT_NOT_IN_ORGANIZATION",
		"INTERNAL_SERVER_ERROR",
	}
}

type DestinationType string

// Enum values for DestinationType
const (
	DestinationTypeCloudwatchLogs DestinationType = "cloud-watch-logs"
)

// Values returns all known values for DestinationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DestinationType) Values() []DestinationType {
	return []DestinationType{
		"cloud-watch-logs",
	}
}

type EncryptedLogGroupStrategy string

// Enum values for EncryptedLogGroupStrategy
const (
	EncryptedLogGroupStrategyAllow EncryptedLogGroupStrategy = "ALLOW"
	EncryptedLogGroupStrategySkip  EncryptedLogGroupStrategy = "SKIP"
)

// Values returns all known values for EncryptedLogGroupStrategy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EncryptedLogGroupStrategy) Values() []EncryptedLogGroupStrategy {
	return []EncryptedLogGroupStrategy{
		"ALLOW",
		"SKIP",
	}
}

type EncryptionConflictResolutionStrategy string

// Enum values for EncryptionConflictResolutionStrategy
const (
	EncryptionConflictResolutionStrategyAllow EncryptionConflictResolutionStrategy = "ALLOW"
	EncryptionConflictResolutionStrategySkip  EncryptionConflictResolutionStrategy = "SKIP"
)

// Values returns all known values for EncryptionConflictResolutionStrategy. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EncryptionConflictResolutionStrategy) Values() []EncryptionConflictResolutionStrategy {
	return []EncryptionConflictResolutionStrategy{
		"ALLOW",
		"SKIP",
	}
}

type EncryptionStrategy string

// Enum values for EncryptionStrategy
const (
	EncryptionStrategyCustomerManaged EncryptionStrategy = "CUSTOMER_MANAGED"
	EncryptionStrategyAwsOwned        EncryptionStrategy = "AWS_OWNED"
)

// Values returns all known values for EncryptionStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EncryptionStrategy) Values() []EncryptionStrategy {
	return []EncryptionStrategy{
		"CUSTOMER_MANAGED",
		"AWS_OWNED",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeAwsEc2Instance    ResourceType = "AWS::EC2::Instance"
	ResourceTypeAwsEc2Vpc         ResourceType = "AWS::EC2::VPC"
	ResourceTypeAwsLamdbaFunction ResourceType = "AWS::Lambda::Function"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"AWS::EC2::Instance",
		"AWS::EC2::VPC",
		"AWS::Lambda::Function",
	}
}

type RuleHealth string

// Enum values for RuleHealth
const (
	RuleHealthHealthy      RuleHealth = "Healthy"
	RuleHealthUnhealthy    RuleHealth = "Unhealthy"
	RuleHealthProvisioning RuleHealth = "Provisioning"
)

// Values returns all known values for RuleHealth. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RuleHealth) Values() []RuleHealth {
	return []RuleHealth{
		"Healthy",
		"Unhealthy",
		"Provisioning",
	}
}

type Status string

// Enum values for Status
const (
	StatusNotStarted  Status = "NOT_STARTED"
	StatusStarting    Status = "STARTING"
	StatusFailedStart Status = "FAILED_START"
	StatusRunning     Status = "RUNNING"
	StatusStopping    Status = "STOPPING"
	StatusFailedStop  Status = "FAILED_STOP"
	StatusStopped     Status = "STOPPED"
)

// Values returns all known values for Status. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Status) Values() []Status {
	return []Status{
		"NOT_STARTED",
		"STARTING",
		"FAILED_START",
		"RUNNING",
		"STOPPING",
		"FAILED_STOP",
		"STOPPED",
	}
}

type TelemetryEnrichmentStatus string

// Enum values for TelemetryEnrichmentStatus
const (
	TelemetryEnrichmentStatusRunning  TelemetryEnrichmentStatus = "Running"
	TelemetryEnrichmentStatusStopped  TelemetryEnrichmentStatus = "Stopped"
	TelemetryEnrichmentStatusImpaired TelemetryEnrichmentStatus = "Impaired"
)

// Values returns all known values for TelemetryEnrichmentStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TelemetryEnrichmentStatus) Values() []TelemetryEnrichmentStatus {
	return []TelemetryEnrichmentStatus{
		"Running",
		"Stopped",
		"Impaired",
	}
}

type TelemetryState string

// Enum values for TelemetryState
const (
	TelemetryStateEnabled       TelemetryState = "Enabled"
	TelemetryStateDisabled      TelemetryState = "Disabled"
	TelemetryStateNotApplicable TelemetryState = "NotApplicable"
)

// Values returns all known values for TelemetryState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TelemetryState) Values() []TelemetryState {
	return []TelemetryState{
		"Enabled",
		"Disabled",
		"NotApplicable",
	}
}

type TelemetryType string

// Enum values for TelemetryType
const (
	TelemetryTypeLogs    TelemetryType = "Logs"
	TelemetryTypeMetrics TelemetryType = "Metrics"
	TelemetryTypeTraces  TelemetryType = "Traces"
)

// Values returns all known values for TelemetryType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TelemetryType) Values() []TelemetryType {
	return []TelemetryType{
		"Logs",
		"Metrics",
		"Traces",
	}
}
