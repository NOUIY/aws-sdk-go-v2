// Code generated by smithy-go-codegen DO NOT EDIT.

package applicationsignals

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/applicationsignals/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Retrieves the current state information for services monitored by Application
// Signals. Service states include health status, recent change events, and other
// operational metadata.
//
// You can filter results by time range, AWS account, and service attributes to
// focus on specific services or time periods. This operation supports pagination
// and can include data from linked accounts.
func (c *Client) ListServiceStates(ctx context.Context, params *ListServiceStatesInput, optFns ...func(*Options)) (*ListServiceStatesOutput, error) {
	if params == nil {
		params = &ListServiceStatesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListServiceStates", params, optFns, c.addOperationListServiceStatesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListServiceStatesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListServiceStatesInput struct {

	// The end time for the service states query. Only service states before this time
	// will be included. Specify the time as the number of milliseconds since January
	// 1, 1970, 00:00:00 UTC.
	//
	// This member is required.
	EndTime *time.Time

	// The start time for the service states query. Only service states from this time
	// onward will be included. Specify the time as the number of milliseconds since
	// January 1, 1970, 00:00:00 UTC.
	//
	// This member is required.
	StartTime *time.Time

	// An array of attribute filters to narrow down the service states returned. Each
	// filter specifies an attribute name and the values to match against.
	AttributeFilters []types.AttributeFilter

	// The AWS account ID to filter service states. If specified, only service states
	// from this account will be returned. If not specified, service states from the
	// current account (and linked accounts if enabled) are returned.
	AwsAccountId *string

	// Specifies whether to include service states from linked AWS accounts in the
	// results. Set to true to include linked accounts, or false to only include the
	// current account. Defaults to false .
	IncludeLinkedAccounts bool

	// The maximum number of service states to return in a single request. Valid range
	// is 1 to 100. If not specified, defaults to 50.
	MaxResults *int32

	// The token for the next set of results. Use this token to retrieve additional
	// pages of service states when the result set is large.
	NextToken *string

	noSmithyDocumentSerde
}

type ListServiceStatesOutput struct {

	// The end time of the query range, expressed as the number of milliseconds since
	// January 1, 1970, 00:00:00 UTC.
	//
	// This member is required.
	EndTime *time.Time

	// An array of service state objects that match the specified criteria. Each
	// service state includes current status, recent change events, and service
	// metadata.
	//
	// This member is required.
	ServiceStates []types.ServiceState

	// The start time of the query range, expressed as the number of milliseconds
	// since January 1, 1970, 00:00:00 UTC.
	//
	// This member is required.
	StartTime *time.Time

	// The token to use for retrieving the next page of results. This value is present
	// only if there are more results available than were returned in the current
	// response.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationListServiceStatesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListServiceStates{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListServiceStates{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "ListServiceStates"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpListServiceStatesValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListServiceStates(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addInterceptAttempt(stack, options); err != nil {
		return err
	}
	if err = addInterceptExecution(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeSerialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterSerialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeSigning(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterSigning(stack, options); err != nil {
		return err
	}
	if err = addInterceptTransmit(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeDeserialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterDeserialization(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

// ListServiceStatesPaginatorOptions is the paginator options for ListServiceStates
type ListServiceStatesPaginatorOptions struct {
	// The maximum number of service states to return in a single request. Valid range
	// is 1 to 100. If not specified, defaults to 50.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// ListServiceStatesPaginator is a paginator for ListServiceStates
type ListServiceStatesPaginator struct {
	options   ListServiceStatesPaginatorOptions
	client    ListServiceStatesAPIClient
	params    *ListServiceStatesInput
	nextToken *string
	firstPage bool
}

// NewListServiceStatesPaginator returns a new ListServiceStatesPaginator
func NewListServiceStatesPaginator(client ListServiceStatesAPIClient, params *ListServiceStatesInput, optFns ...func(*ListServiceStatesPaginatorOptions)) *ListServiceStatesPaginator {
	if params == nil {
		params = &ListServiceStatesInput{}
	}

	options := ListServiceStatesPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &ListServiceStatesPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
		nextToken: params.NextToken,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *ListServiceStatesPaginator) HasMorePages() bool {
	return p.firstPage || (p.nextToken != nil && len(*p.nextToken) != 0)
}

// NextPage retrieves the next ListServiceStates page.
func (p *ListServiceStatesPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*ListServiceStatesOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	optFns = append([]func(*Options){
		addIsPaginatorUserAgent,
	}, optFns...)
	result, err := p.client.ListServiceStates(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken &&
		prevToken != nil &&
		p.nextToken != nil &&
		*prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

// ListServiceStatesAPIClient is a client that implements the ListServiceStates
// operation.
type ListServiceStatesAPIClient interface {
	ListServiceStates(context.Context, *ListServiceStatesInput, ...func(*Options)) (*ListServiceStatesOutput, error)
}

var _ ListServiceStatesAPIClient = (*Client)(nil)

func newServiceMetadataMiddleware_opListServiceStates(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "ListServiceStates",
	}
}
